Date:	Fri Jul 13 12:10:20 2018 +1000
Patch:	wear leveling scrubbing fixable bit flip fix
diff --git a/drivers/mtd/ubi/wl.c b/drivers/mtd/ubi/wl.c
index f66b3b22f328..a1cfadd3b395 100644
--- a/drivers/mtd/ubi/wl.c
+++ b/drivers/mtd/ubi/wl.c
@@ -736,7 +736,7 @@ static int wear_leveling_worker(struct ubi_device *ubi, struct ubi_work *wrk,
 		/* Perform scrubbing */
 		scrubbing = 1;
 		e1 = rb_entry(rb_first(&ubi->scrub), struct ubi_wl_entry, u.rb);
-		e2 = get_peb_for_wl(ubi);
+		e2 = get_peb_for_wl_scrubbing(ubi, e1);
 		if (!e2)
 			goto out_cancel;
 
@@ -1878,6 +1878,39 @@ static struct ubi_wl_entry *get_peb_for_wl(struct ubi_device *ubi)
 	return e;
 }
 
+static struct ubi_wl_entry *get_peb_for_wl_scrubbing(struct ubi_device *ubi, struct ubi_wl_entry *e0)
+{
+	struct ubi_wl_entry *e = NULL;
+	const int min = 0, max = WL_FREE_MAX_DIFF;
+	int w = min, b = min, t = max, d;
+
+	while (b < t && w <= max && w >= min) {
+		e = find_wl_entry(ubi, &ubi->free, w, 0);
+		if (e == e0)
+			e = NULL;
+		d = (t - b) / 2;
+		if (!d)
+			d++;
+		if (!e) {
+			b = w;
+			w += d;
+		}
+		else {
+			t = w;
+			w -= d;
+		}
+	}
+	if ((u32)e < PAGE_SIZE)
+		return NULL;
+
+	self_check_in_wl_tree(ubi, e, &ubi->free);
+	ubi->free_count--;
+	ubi_assert(ubi->free_count >= 0);
+	rb_erase(&e->u.rb, &ubi->free);
+
+	return e;
+}
+
 /**
  * produce_free_peb - produce a free physical eraseblock.
  * @ubi: UBI device description object
diff --git a/drivers/mtd/ubi/wl.h b/drivers/mtd/ubi/wl.h
index a9e2d669acd8..579f7c729b5d 100644
--- a/drivers/mtd/ubi/wl.h
+++ b/drivers/mtd/ubi/wl.h
@@ -6,6 +6,10 @@
 static struct ubi_wl_entry *get_peb_for_wl(struct ubi_device *ubi);
 static struct ubi_wl_entry *next_peb_for_wl(struct ubi_device *ubi,
 					    bool need_fill);
+static inline struct ubi_wl_entry *get_peb_for_wl_scrubbing(struct ubi_device *ubi, struct ubi_wl_entry *e0)
+{
+	return get_peb_for_wl(ubi);
+}
 static bool need_wear_leveling(struct ubi_device *ubi);
 static void ubi_fastmap_close(struct ubi_device *ubi);
 static inline void ubi_fastmap_init(struct ubi_device *ubi, int *count)
@@ -17,6 +21,7 @@
 					       struct rb_root *root);
 #else /* !CONFIG_MTD_UBI_FASTMAP */
 static struct ubi_wl_entry *get_peb_for_wl(struct ubi_device *ubi);
+static struct ubi_wl_entry *get_peb_for_wl_scrubbing(struct ubi_device *ubi, struct ubi_wl_entry *e0);
 static inline void ubi_fastmap_close(struct ubi_device *ubi) { }
 static inline void ubi_fastmap_init(struct ubi_device *ubi, int *count) { }
 static struct ubi_wl_entry *may_reserve_for_fm(struct ubi_device *ubi,
