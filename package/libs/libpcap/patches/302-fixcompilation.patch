--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -76,67 +76,6 @@
     if(NOT ${CMAKE_C_COMPILER} MATCHES "clang*")
         set(C_ADDITIONAL_FLAGS "${C_ADDITIONAL_FLAGS} /utf-8")
     endif(NOT ${CMAKE_C_COMPILER} MATCHES "clang*")
-else(MSVC)
-    #
-    # For checking if a compiler flag works, failing if it doesn't,
-    # and adding it otherwise.
-    #
-    macro(require_and_add_compiler_option _option)
-        message(STATUS "Checking C compiler flag ${_option}")
-        string(REPLACE "=" "-" _temp_option_variable ${_option})
-        string(REGEX REPLACE "^-" "" _option_variable ${_temp_option_variable})
-        check_c_compiler_flag("${_option}" ${_option_variable})
-        if(${${_option_variable}})
-            set(C_ADDITIONAL_FLAGS "${C_ADDITIONAL_FLAGS} ${_option}")
-        else()
-            message(FATAL_ERROR "C99 support is required, but the compiler doesn't support a compiler flag to enable it")
-        endif()
-    endmacro()
-
-    #
-    # Try to enable as many C99 features as we can.
-    # At minimum, we want C++/C99-style // comments.
-    #
-    # Newer versions of compilers might default to supporting C99, but
-    # older versions may require a special flag.
-    #
-    # Prior to CMake 3.1, setting CMAKE_C_STANDARD will not have any effect,
-    # so, unless and until we require CMake 3.1 or later, we have to do it
-    # ourselves on pre-3.1 CMake, so we just do it ourselves on all versions
-    # of CMake.
-    #
-    # Note: with CMake 3.1 through 3.5, the only compilers for which CMake
-    # handles CMAKE_C_STANDARD are GCC and Clang.  3.6 adds support only
-    # for Intel C; 3.9 adds support for PGI C, Sun C, and IBM XL C, and
-    # 3.10 adds support for Cray C and IAR C, but no version of CMake has
-    # support for HP C.  Therefore, even if we use CMAKE_C_STANDARD with
-    # compilers for which CMake supports it, we may still have to do it
-    # ourselves on other compilers.
-    #
-    # See the CMake documentation for the CMAKE_<LANG>_COMPILER_ID variables
-    # for a list of compiler IDs.
-    #
-    # XXX - this just tests whether the option works, fails if it doesn't,
-    # and adds it if it does.  We don't test whether it's necessary in order
-    # to get the C99 features that we use, or whether, if it's used, it
-    # enables all the features that we require.
-    #
-    if(CMAKE_C_COMPILER_ID MATCHES "GNU" OR
-       CMAKE_C_COMPILER_ID MATCHES "Clang")
-        require_and_add_compiler_option("-std=gnu99")
-    elseif(CMAKE_C_COMPILER_ID MATCHES "XL")
-        #
-        # We want support for extensions picked up for GNU C compatibility,
-        # so we use -qlanglvl=extc99.
-        #
-        require_and_add_compiler_option("-qlanglvl=extc99")
-    elseif(CMAKE_C_COMPILER_ID MATCHES "HP")
-        require_and_add_compiler_option("-AC99")
-    elseif(CMAKE_C_COMPILER_ID MATCHES "Sun")
-        require_and_add_compiler_option("-xc99")
-    elseif(CMAKE_C_COMPILER_ID MATCHES "Intel")
-        require_and_add_compiler_option("-c99")
-    endif()
 endif(MSVC)
 
 #
