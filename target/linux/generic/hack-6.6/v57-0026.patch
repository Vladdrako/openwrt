--- a/drivers/char/lrng/lrng_interface_dev_common.c
+++ b/drivers/char/lrng/lrng_interface_dev_common.c
@@ -111,7 +111,7 @@ ssize_t lrng_read_common(char __user *bu
 	 * request sizes, such as 16 or 32 bytes, avoid a kmalloc overhead for
 	 * those by using the stack variable of tmpbuf.
 	 */
-	if (!IS_ENABLED(CONFIG_BASE_SMALL) && (nbytes > sizeof(tmpbuf))) {
+	if (!CONFIG_BASE_SMALL && (nbytes > sizeof(tmpbuf))) {
 		tmplen = min_t(u32, nbytes, LRNG_DRNG_MAX_REQSIZE);
 		tmp_large = kmalloc(tmplen + LRNG_KCAPI_ALIGN, GFP_KERNEL);
 		if (!tmp_large)
--- a/drivers/char/lrng/lrng_sysctl.c
+++ b/drivers/char/lrng/lrng_sysctl.c
@@ -23,7 +23,7 @@
  * returned as an ASCII string in the standard UUID format; if via the
  * sysctl system call, as 16 bytes of binary data.
  */
-static int lrng_sysctl_do_uuid(const struct ctl_table *table, int write,
+static int lrng_sysctl_do_uuid(struct ctl_table *table, int write,
 			       void *buffer, size_t *lenp, loff_t *ppos)
 {
 	struct ctl_table fake_table;
@@ -50,7 +50,7 @@ static int lrng_sysctl_do_uuid(const str
 	return proc_dostring(&fake_table, write, buffer, lenp, ppos);
 }
 
-static int lrng_sysctl_do_entropy(const struct ctl_table *table, int write,
+static int lrng_sysctl_do_entropy(struct ctl_table *table, int write,
 				 void *buffer, size_t *lenp, loff_t *ppos)
 {
 	struct ctl_table fake_table;
@@ -62,7 +62,7 @@ static int lrng_sysctl_do_entropy(const
 	return proc_dointvec(&fake_table, write, buffer, lenp, ppos);
 }
 
-static int lrng_sysctl_do_poolsize(const struct ctl_table *table, int write,
+static int lrng_sysctl_do_poolsize(struct ctl_table *table, int write,
 				   void *buffer, size_t *lenp, loff_t *ppos)
 {
 	struct ctl_table fake_table;
