--- a/kernel/module/Kconfig
+++ b/kernel/module/Kconfig
@@ -286,6 +286,25 @@
 	  one per line. The path can be absolute, or relative to the kernel
 	  source tree.
 
+config MAX_KMOD_CONCURRENT_P2
+       int "Max allowed concurrent request_module() calls (6=>64, 10=>1024)"
+       range 6 14
+       default 7 if !BASE_SMALL
+       default 6 if BASE_SMALL
+       help
+         The kernel restricts the number of possible concurrent calls to
+         request_module() to help avoid a recursive loop possible with
+         modules. The default maximum number of concurrent threads allowed
+         to run request_module() will be:
+
+           max_modprobes = min(max_threads/2, 1 << CONFIG_MAX_KMOD_CONCURRENT_P2);
+
+         The value set in CONFIG_MAX_KMOD_CONCURRENT_P2 represents then the power
+         of 2 value used at boot time for the above computation.
+         We set this to default to 64 (2^6) concurrent modprobe threads for
+         small systems, for larger systems this defaults to 128 (2^7)
+         concurrent modprobe threads.
+
 config MODULES_TREE_LOOKUP
 	def_bool y
 	depends on PERF_EVENTS || TRACING || CFI_CLANG
--- a/kernel/module/kmod.c
+++ b/kernel/module/kmod.c
@@ -46,7 +46,7 @@
  * and this would only be an upper limit, after which the OOM killer would take
  * effect. Systems like these are very unlikely if modules are enabled.
  */
-#define MAX_KMOD_CONCURRENT 50
+#define MAX_KMOD_CONCURRENT (1 << CONFIG_MAX_KMOD_CONCURRENT_P2)
 static DEFINE_SEMAPHORE(kmod_concurrent_max, MAX_KMOD_CONCURRENT);
 
 /*
