From aec0dc5606ad84efb2b31dd7c0b797f6cc513828 Mon Sep 17 00:00:00 2001
From: Andris PE <neandris@gmail.com>
Date: Tue, 29 Apr 2025 20:18:28 +0000
Subject: [PATCH] ruleset: Apply flow offload to in-flow packets

Apply flow offload after packets are matched to already permitted state
This programs offload on 3rd tcp packet, so that 4th is offloaded, one
rtt earlier.

Signed-off-by: Andris PE <neadris@gmail.com>
---
 root/etc/nftables.d/90-offload-exceptions.nft | 18 ++++++++++++++++++
 root/usr/share/firewall4/templates/ruleset.uc | 13 ++++++++++---
 tests/01_configuration/01_ruleset             |  7 +++++--
 3 files changed, 33 insertions(+), 5 deletions(-)
 create mode 100644 root/etc/nftables.d/90-offload-exceptions.nft

diff --git a/root/etc/nftables.d/90-offload-exceptions.nft b/root/etc/nftables.d/90-offload-exceptions.nft
new file mode 100644
index 0000000..9526277
--- /dev/null
+++ b/root/etc/nftables.d/90-offload-exceptions.nft
@@ -0,0 +1,18 @@
+## You can prepend rules to dynamic chains,
+## pre-empting offload by accepting packets
+## that do not need offload processing for
+## e.g IDS, games or bugs
+## Use only a single rule that seems to address the needs.
+
+#chain handle_offload {
+#	ct bytes < 1000000 counter accept
+#	ct packets < 30 counter accept
+#	ct original proto-dst 3074 counter accept
+#	ct protocol udp counter accept
+#	meta nfproto . meta l4proto { ipv4 . icmp, ipv6 . iipv6-icmp } counter accept
+#}
+
+##	the fw4 offload table follows when enabled
+##	flow add @ft accept
+##	accept
+
diff --git a/root/usr/share/firewall4/templates/ruleset.uc b/root/usr/share/firewall4/templates/ruleset.uc
index 4d871a1..e6bcf03 100644
--- a/root/usr/share/firewall4/templates/ruleset.uc
+++ b/root/usr/share/firewall4/templates/ruleset.uc
@@ -133,11 +133,12 @@
 	chain forward {
 		type filter hook forward priority filter; policy {{ fw4.forward_policy(true) }};
 
+{% fw4.includes('chain-prepend', 'forward') %}
 {% if (length(flowtable_devices) > 0): %}
-		meta l4proto { tcp, udp } ct original packets ge 16 flow offload @ft;
-{% endif %}
-{% fw4.includes('chain-prepend', 'forward') %}
+		ct state established,related goto handle_offload comment "!fw4: Handle forwarded flows"
+{% else %}
 		ct state established,related accept comment "!fw4: Accept forwarded flows"
+{% endif %}
 {% for (let rule in fw4.rules("forward")): %}
 		{%+ include("rule.uc", { fw4, zone: (rule.src?.zone?.log_limit ? rule.src.zone : rule.dest?.zone), rule }) %}
 {% endfor %}
@@ -206,6 +207,12 @@ table inet fw4 {
 				: "tcp reset"
 		}} comment "!fw4: Reject any other traffic"
 	}
+{% if (length(flowtable_devices) > 0): %}
+	chain handle_offload {
+		flow add @ft accept
+		accept
+	}
+{% endif %}
 
 {% if (fw4.default_option("synflood_protect") && fw4.default_option("synflood_rate")):
 	let r = fw4.default_option("synflood_rate");
diff --git a/tests/01_configuration/01_ruleset b/tests/01_configuration/01_ruleset
index 06d9ea8..c74f456 100644
--- a/tests/01_configuration/01_ruleset
+++ b/tests/01_configuration/01_ruleset
@@ -122,8 +122,7 @@ table inet fw4 {
 	chain forward {
 		type filter hook forward priority filter; policy drop;
 
-		meta l4proto { tcp, udp } flow offload @ft;
-		ct state established,related accept comment "!fw4: Accept forwarded flows"
+		ct state established,related goto handle_offload comment "!fw4: Handle forwarded flows"
 		iifname "br-lan" jump forward_lan comment "!fw4: Handle lan IPv4/IPv6 forward traffic"
 		iifname "pppoe-wan" jump forward_wan comment "!fw4: Handle wan IPv4/IPv6 forward traffic"
 		jump handle_reject
@@ -149,6 +148,10 @@ table inet fw4 {
 		meta l4proto tcp reject with tcp reset comment "!fw4: Reject TCP traffic"
 		reject with icmpx type port-unreachable comment "!fw4: Reject any other traffic"
 	}
+	chain handle_offload {
+		flow add @ft accept
+		accept
+	}
 
 	chain syn_flood {
 		limit rate 25/second burst 50 packets return comment "!fw4: Accept SYN packets below rate-limit"
